# -*- coding: utf-8 -*-
"""LeagueApp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lSdiJ47numuDEwbd0VXUkWGeF43q9ev8
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import requests
import io

# ----------------------------------------------------
# 1. Page configuration
# ----------------------------------------------------
st.set_page_config(
    page_title="League Winner Predictor",
    page_icon="üèÜ",
    layout="centered"
)

st.title("üèÜ League Winner Predictor")
st.markdown("### Predict the League Winner using your model from GitHub")

# ----------------------------------------------------
# 2. Load model from GitHub
# ----------------------------------------------------
@st.cache_resource
def load_model_from_github():

    model_url = "https://raw.githubusercontent.com/challaharshitha48/match_winner/main/Leaguewinner/random_forest_model.pkl"

    try:
        response = requests.get(model_url)
        response.raise_for_status()
        model = pickle.load(io.BytesIO(response.content))
        return model
    except Exception as e:
        st.error(f"‚ö†Ô∏è Failed to load model from GitHub:\n{e}")
        return None


model = load_model_from_github()

if model is not None:
    st.success("‚úÖ Model loaded successfully from GitHub!")
else:
    st.stop()

# ----------------------------------------------------
# 3. User input section
# ----------------------------------------------------
st.header("üìä Input Team Statistics")

# Example input fields (customize based on your model features)
# Replace these with the actual features used in your notebook
col1, col2 = st.columns(2)

with col1:
    goals_scored = st.number_input("Goals Scored", min_value=0, max_value=200, value=50)
    possession = st.slider("Possession (%)", 0, 100, 55)
    shots_on_target = st.number_input("Shots on Target", min_value=0, max_value=500, value=120)

with col2:
    goals_conceded = st.number_input("Goals Conceded", min_value=0, max_value=200, value=30)
    pass_accuracy = st.slider("Pass Accuracy (%)", 0, 100, 80)
    total_wins = st.number_input("Total Wins", min_value=0, max_value=60, value=20)

# Create input dataframe
input_data = pd.DataFrame({
    "Goals_Scored": [goals_scored],
    "Goals_Conceded": [goals_conceded],
    "Possession": [possession],
    "Pass_Accuracy": [pass_accuracy],
    "Shots_on_Target": [shots_on_target],
    "Total_Wins": [total_wins]
})

st.subheader("üîç Input Data Preview")
st.dataframe(input_data)

# ----------------------------------------------------
# 4. Make prediction
# ----------------------------------------------------
if st.button("Predict Winner"):
    try:
        prediction = model.predict(input_data)
        st.success(f"üèÖ **Predicted League Winner:** {prediction[0]}")
    except Exception as e:
        st.error(f"‚ùå Error during prediction:\n{e}")

# ----------------------------------------------------
# 5. Footer
# ----------------------------------------------------
st.markdown("---")
st.caption("Built with ‚ù§Ô∏è using Streamlit and a GitHub-hosted model.")