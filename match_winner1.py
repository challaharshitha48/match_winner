# -*- coding: utf-8 -*-
"""match_winner1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c8IGWKJDOeIXC66Cra37SiKqHoUahf4D
"""

from google.colab import drive
drive.mount('/content/drive')

# ----------------------------
# 1. Import Libraries
# ----------------------------
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
#loading th dataset
df = pd.read_csv("/content/drive/MyDrive/cleaned_dataset_for_matchwinner.csv")
#dropping the unwanted cols
drop_cols = ['Season', 'MatchDate',
             'FullTimeHomeGoals', 'FullTimeAwayGoals',
             'HalfTimeHomeGoals', 'HalfTimeAwayGoals', 'HalfTimeResult']

df_cleaned = df.drop(columns=drop_cols, errors='ignore')

# encoding the target
target_col = 'FullTimeResult'
df_encoded = df_cleaned.copy()

# Encode categorical columns except target
for col in df_encoded.select_dtypes(include=['object']).columns:
    if col != target_col:
        le = LabelEncoder()
        df_encoded[col] = le.fit_transform(df_encoded[col].astype(str))

# Encode target
le_y = LabelEncoder()
df_encoded[target_col] = le_y.fit_transform(df_encoded[target_col])
#split data
X = df_encoded.drop(columns=[target_col])
y = df_encoded[target_col]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)
#  Default Random Forest

rf_default = RandomForestClassifier(random_state=42, class_weight="balanced")
rf_default.fit(X_train, y_train)

y_pred_default = rf_default.predict(X_test)

print("\n=== Default Random Forest ===")
print("Accuracy:", accuracy_score(y_test, y_pred_default))
print("\nClassification Report:\n", classification_report(y_test, y_pred_default, target_names=le_y.classes_))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred_default))
#  Hyperparameter Tuning with GridSearchCV

param_grid = {
    'n_estimators': [100, 200],
    'max_depth': [10, 20, None],
    'min_samples_split': [2, 5],
    'min_samples_leaf': [1, 2],
    'max_features': ['sqrt', 'log2']
}

rf = RandomForestClassifier(random_state=42, class_weight="balanced")

grid_search = GridSearchCV(
    estimator=rf,
    param_grid=param_grid,
    cv=5,
    scoring='accuracy',
    n_jobs=-1
)

grid_search.fit(X_train, y_train)

print("\n=== Best Hyperparameters (Random Forest) ===")
print(grid_search.best_params_)
# Tuned Random Forest

rf_best = grid_search.best_estimator_
y_pred_best = rf_best.predict(X_test)

print("\n=== Tuned Random Forest ===")
print("Accuracy:", accuracy_score(y_test, y_pred_best))
print("\nClassification Report:\n", classification_report(y_test, y_pred_best, target_names=le_y.classes_))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred_best))
import pickle

# Save the trained Random Forest model
with open("/content/drive/MyDrive/match_winner_model.pkl", "wb") as f:
    pickle.dump(rf_best, f)


print("‚úÖ Model saved successfully!")

# 1. Model train chesi fit cheyyali
from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier()
model.fit(X_train, y_train)   # üëà ikkadike train cheyyali

# 2. Pickle library import cheyyi (pip install avasaram ledu)
import pickle

# 3. Model ni save cheyyi
with open("match_winner_model.pkl", "wb") as f:
    pickle.dump(model, f)

# 4. Tarvata download cheyyi
from google.colab import files
files.download("match_winner_model.pkl")

pip install streamlit pandas numpy scikit-learn pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import numpy as np
# import pickle
# 
# model = pickle.load(open("match_winner_model.pkl", "rb"))
# 
# team_mapping = {
#     "Arsenal": 0,
#     "Chelsea": 1,
#     "Liverpool": 2,
#     "Manchester City": 3,
#     "Default": 0
# }
# 
# 
# st.title("‚öΩ Match Winner Predictor")
# st.write("Enter match stats to predict the winner (Home Win / Draw / Away Win).")
# 
# # Teams
# home_team = st.selectbox("Home Team", list(team_mapping.keys()))
# away_team = st.selectbox("Away Team", list(team_mapping.keys()))
# 
# # Create two columns for home and away stats
# col1, col2 = st.columns(2)
# 
# with col1:
#     st.subheader("Home Team Stats")
#     home_shots = st.number_input("Shots", min_value=0, value=10, key="home_shots")
#     home_shots_on_target = st.number_input("Shots on Target", min_value=0, value=5, key="home_shots_target")
#     home_corners = st.number_input("Corners", min_value=0, value=6, key="home_corners")
#     home_fouls = st.number_input("Fouls", min_value=0, value=12, key="home_fouls")
#     home_yellow = st.number_input("Yellow Cards", min_value=0, value=2, key="home_yellow")
#     home_red = st.number_input("Red Cards", min_value=0, value=0, key="home_red")
# 
# with col2:
#     st.subheader("Away Team Stats")
#     away_shots = st.number_input("Shots", min_value=0, value=8, key="away_shots")
#     away_shots_on_target = st.number_input("Shots on Target", min_value=0, value=4, key="away_shots_target")
#     away_corners = st.number_input("Corners", min_value=0, value=5, key="away_corners")
#     away_fouls = st.number_input("Fouls", min_value=0, value=14, key="away_fouls")
#     away_yellow = st.number_input("Yellow Cards", min_value=0, value=3, key="away_yellow")
#     away_red = st.number_input("Red Cards", min_value=0, value=1, key="away_red")
# 
# # Encode teams
# home_team_encoded = team_mapping.get(home_team, 0)
# away_team_encoded = team_mapping.get(away_team, 0)
# 
# # Prepare input for model (14 features)
# input_data = np.array([[home_team_encoded, away_team_encoded,
#                         home_shots, away_shots,
#                         home_shots_on_target, away_shots_on_target,
#                         home_corners, away_corners,
#                         home_fouls, away_fouls,
#                         home_yellow, away_yellow,
#                         home_red, away_red]])
# 
# # Prediction
# if st.button("Predict Winner"):
#     prediction = model.predict(input_data)[0]
# 
#     if prediction == 1:
#         st.success(f"üè† Prediction: {home_team} Wins")
#     elif prediction == 0:
#         st.info("ü§ù Prediction: Match Draw")
#     else:
#         st.error(f"üö© Prediction: {away_team} Wins")
#

from pyngrok import ngrok, conf
conf.get_default().auth_token = "33SBM8rLwcMx35IVpLxYI2k0L5W_7r1J3aCCPPFApp7hzvJ6n"

import os
from pyngrok import ngrok

# Start Streamlit
os.system("streamlit run app.py --server.port 8501 &")

# Get public URL
public_url = ngrok.connect(8501)
print("Your Dashboard URL:", public_url)