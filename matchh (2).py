# -*- coding: utf-8 -*-
"""matchh.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UWjWTJN2WqFPndkhOFH85bSViXx0S540
"""

import streamlit as st
import numpy as np
import pickle
import os

st.title("⚽ Match Winner Predictor")
st.write("Enter match stats to predict the winner (Home Win / Draw / Away Win).")

# 🔹 Safe model loading
model_path = os.path.join(os.path.dirname(__file__), "match_winner_model.pkl.gz")

if os.path.exists(model_path):
    with open(model_path, "rb") as f:
        model = pickle.load(f)
else:
    st.error("❌ Model file not found! Make sure 'match_winner_model.pkl' is uploaded to the repo.")
    st.stop()  # Stop the app if model is missing

# 🔹 Team mapping
team_mapping = {
    "Arsenal": 0,
    "Chelsea": 1,
    "Liverpool": 2,
    "Manchester City": 3,
    "Default": 0
}

# 🔹 Teams selection
home_team = st.selectbox("Home Team", list(team_mapping.keys()))
away_team = st.selectbox("Away Team", list(team_mapping.keys()))

# 🔹 Create two columns for home and away stats
col1, col2 = st.columns(2)

with col1:
    st.subheader("Home Team Stats")
    home_shots = st.number_input("Shots", min_value=0, value=10, key="home_shots")
    home_shots_on_target = st.number_input("Shots on Target", min_value=0, value=5, key="home_shots_target")
    home_corners = st.number_input("Corners", min_value=0, value=6, key="home_corners")
    home_fouls = st.number_input("Fouls", min_value=0, value=12, key="home_fouls")
    home_yellow = st.number_input("Yellow Cards", min_value=0, value=2, key="home_yellow")
    home_red = st.number_input("Red Cards", min_value=0, value=0, key="home_red")

with col2:
    st.subheader("Away Team Stats")
    away_shots = st.number_input("Shots", min_value=0, value=8, key="away_shots")
    away_shots_on_target = st.number_input("Shots on Target", min_value=0, value=4, key="away_shots_target")
    away_corners = st.number_input("Corners", min_value=0, value=5, key="away_corners")
    away_fouls = st.number_input("Fouls", min_value=0, value=14, key="away_fouls")
    away_yellow = st.number_input("Yellow Cards", min_value=0, value=3, key="away_yellow")
    away_red = st.number_input("Red Cards", min_value=0, value=1, key="away_red")

# 🔹 Encode teams
home_team_encoded = team_mapping.get(home_team, 0)
away_team_encoded = team_mapping.get(away_team, 0)

# 🔹 Prepare input for model (14 features)
input_data = np.array([[home_team_encoded, away_team_encoded,
                        home_shots, away_shots,
                        home_shots_on_target, away_shots_on_target,
                        home_corners, away_corners,
                        home_fouls, away_fouls,
                        home_yellow, away_yellow,
                        home_red, away_red]])

# 🔹 Prediction
if st.button("Predict Winner"):
    try:
        prediction = model.predict(input_data)[0]

        if prediction == 1:
            st.success(f"🏠 Prediction: {home_team} Wins")
        elif prediction == 0:
            st.info("🤝 Prediction: Match Draw")
        else:
            st.error(f"🚩 Prediction: {away_team} Wins")
    except Exception as e:
        st.error(f"Prediction failed: {e}")